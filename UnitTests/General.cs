using System;
using System.Diagnostics;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Scrobbling;

namespace UnitTests
{
    [TestClass]
    public class General
    {
        [TestMethod]
        public void Debug()
        {
            Assert.Inconclusive();
            return;

            var tokenResult = Auth.GetToken().Result;
            var url = Auth.GetAuthorizeTokenUrl(tokenResult.Result);
            Process.Start(url);
            Console.WriteLine("Press enter once the token is authorized in the browser.");
            Console.ReadLine();
            var sessionResult = Auth.GetSession(tokenResult.Result).Result;



            var scrobble = new Scrobble("Russ Chimes", "Targa (Original Mix)", DateTimeOffset.Now.AddMinutes(-4))
            {
                Album = "Midnight Club EP",
                TrackNumber = "1/3",
                Duration = new TimeSpan(0, 5, 16)
            };

            var sessionKey = "";

            var updateNowPlayingResult = Track.UpdateNowPlaying(sessionKey, scrobble).Result;

            var scrobbleResult = Track.Scrobble(sessionKey, scrobble).Result;
        }

        [TestMethod]
        public void CheckApiFormat()
        {
            // TODO: unit test checking the same request both in xml and json, and comparing them.
            // IIRC the json generated by last.fm is worse than xml
            // (ie: one xml element is one json property, several xml elements become a json array (!))
        }

        /*
         * What to test TODO:
         * - Cache, Serializer
         * - Ensure that native callbacks (OnTrackStartsPlaying...) use the right arguments (create a scrobbler with the proper strings in the proper place, e.g. they are not mixed up)
         * - Simulate all the actions triggered by the native plugin and check they do what we expect
         * - Integration tests for the api?
         * - Auth?
         */
    }
}
